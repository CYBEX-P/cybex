openapi: 3.0.2
info:
  title: 'CYBEX-P Portal API Doc'
  description: 'Documentation for the CYBEX-P Portal API. This is solely for the frontend web application and is seperate from the backend CYBEX-P API.'
  version: '1.0.0'
paths:
  /api/v1/admin/config:
    get:
      operationId: listgetconfigs
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ''
      tags:
      - api
  /api/v1/neo4j/export:
    get:
      operationId: listexportNeoDBs
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ''
      tags:
      - api
  /api/v1/neo4j/insert/{node_type}/{value}/:
    get:
      operationId: retrieveinsert
      description: ''
      parameters:
      - name: node_type
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: value
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/v1/enrich/{enrich_type}/{value}/:
    get:
      operationId: retrieveenrichNode
      description: ''
      parameters:
      - name: enrich_type
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: value
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/v1/delete/{node_id}/:
    get:
      operationId: retrievedelete
      description: ''
      parameters:
      - name: node_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/v1/macroCybex/{query}/:
    get:
      operationId: retrievemacroCybex
      description: ''
      parameters:
      - name: query
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/v1/macro/{subroutine}/:
    get:
      operationId: retrievemacro
      description: ''
      parameters:
      - name: subroutine
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/v1/neo4j/wipe:
    get:
      operationId: listwipes
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ''
      tags:
      - api
  /api/v1/getContents/{path}/:
    get:
      operationId: retrievegetContents
      description: ''
      parameters:
      - name: path
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/v1/user_management/currentUserInfo/{info_to_return}/:
    get:
      operationId: retrievecurrentUserInfo
      description: Implements get method for currentUser API
      parameters:
      - name: info_to_return
        in: path
        required: true
        description: '"user_of" for all orgs user belongs to,
                "admin_of" for all orgs user is admin of, or "basic_info" for user
                info object containing user hash, username, email'
        schema:
          type: string
      responses:
        '200':
          # content:
          #   application/json:
          #     schema: {}
          description: 'Either object containing user info or list of orgs, depending on info_to_return'
      tags:
      - api
  /isSignedIn:
    get:
      operationId: listisSignedIns
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ''
      tags:
      - isSignedIn
  /isAdmin:
    get:
      operationId: listisAdmins
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ''
      tags:
      - isAdmin
  /api/v1/enrich/{enrich_type}/:
    post:
      operationId: createenrichNodePost
      description: ''
      parameters:
      - name: enrich_type
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/v1/enrichURL:
    post:
      operationId: createenrichURL
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/v1/user_management/org_info:
    post:
      operationId: createorgInfo
      description: Implements post method for orgInfo API
      parameters: []
      requestBody:
        content:
          application/json:
            schema: 
              type: object
              properties:
                  org_hash:
                    type: string
                    description: unique hash for the org
                  return_type:
                    type: string
                    description: admin, user, acl, or all. Specifies whether to return the chosen individual list or all lists for the given org.
              required:
                  - org_hash
                  - return_type
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          # content:
          #   application/json:
          #     schema: {}
          description: 'Object representing specified lists for given org.'
      tags:
      - api
  /api/v1/user_management/org_add_remove:
    post:
      operationId: createorgAddRemoveUser
      description: Implements post method for orgAddRemoveUser API
      parameters: []
      requestBody:
        content:
          application/json:
            schema: 
              type: object
              properties:
                  org_hash:
                    type: string
                    description: unique hash for the org
                  users:
                    type: array
                    items:
                      type: string
                    description: array of user hashes to be added or removed.
                  list_type: 
                    type: string
                    description: admin, user, or acl. The list to which the given users should be added or removed from.
                  action: 
                    type: string
                    description: add or remove. The action to perform for the given users.
              required:
                  - org_hash
                  - users
                  - list_type
                  - action
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          # content:
          #   application/json:
          #     schema: {}
          description: '201 if successful'
      tags:
      - api
  /import_json:
    post:
      operationId: createimportJson
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - import-json
  /api/v1/position:
    post:
      operationId: createposition
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/v1/dataEntry:
    post:
      operationId: createdataEntry
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/v1/event/start:
    post:
      operationId: createstart
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/v1/event/start/file:
    post:
      operationId: createstartFile
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api

components:
   schemas:
      Pet:
         type: object
         properties:
            name:
               type: string
            type:
               type: string
            legs:
               type: integer
         required:
            - type